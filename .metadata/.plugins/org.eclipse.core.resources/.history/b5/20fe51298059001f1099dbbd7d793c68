package com.dsa_graph.dijkstras;

import java.util.ArrayList;
import java.util.PriorityQueue;

public class GraphW {
	private int v;
	private ArrayList<Edge> graph[];

	static class Edge {
		int source;
		int destination;
		int weight;

		public Edge(int source, int destination, int weight) {
			this.source = source;
			this.destination = destination;
			this.weight = weight;
		}

		@Override
		public String toString() {
			return "[" + this.source + "," + this.destination + "]";
		}
	}

	public GraphW(int v) {
		graph = new ArrayList[v];
		for (int i = 0; i < v; i++) {
			graph[i] = new ArrayList<Edge>();
		}
	}

	public GraphW() {
		graph = new ArrayList[4];
		for (int i = 0; i < 4; i++) {
			graph[i] = new ArrayList<Edge>();
		}
	}

	public void addNode(int pos, int source, int destination, int weight) {
		if (pos > graph.length - 1)
			return;
		graph[pos].add(new Edge(source, destination, weight));
	}

	public void print(Graph graph) {
		for (ArrayList<Edge> l : this.graph) {
			System.out.println(l);
		}
	}

	public ArrayList<Edge> getNode(int node) {
		return graph[node];
	}

	public int[] getNeigbors(int node) {
		ArrayList<Edge> arrayList = graph[node];
		int[] neigbors = new int[arrayList.size()];
		for (int i = 0; i < arrayList.size(); i++) {
			neigbors[i] = arrayList.get(i).destination;
		}
		return neigbors;
	}

	static public class Pair implements Comparable<Pair> {
		int node;
		int dist;

		public Pair(int node, int dist) {
			this.node = node;
			this.dist = dist;
		}

		@Override
		public int compareTo(Pair p) {
			return this.dist - p.dist;
		}
	}

	public static void dijkstras(GraphW g, int v, int src) {
		int[] dist = new int[v];
		boolean[] isV = new boolean[v];
		PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
		ArrayList<Edge>[] graph = g.graph;
		for (int i = 0; i < v; i++) {
			dist[i] = Integer.MAX_VALUE;
		}

		pq.add(new Pair(0, 0));

		while (!pq.isEmpty()) {
			Pair curr = pq.remove();

			if (!isV[curr.node]) {
				isV[curr.node] = true;
				for (int i = 0; i < graph[curr.node].size(); i++) {
					Edge e = graph[curr.node].get(i);
					int source = e.source;
					int destination = e.destination;
					if (dist[source] + e.weight < dist[destination]) {
						dist[destination] = dist[source] + e.weight;

					}
				}
			}
		}
		for(int i=0;i<v;i++) {
			while(!pq.isEmpty()) {
				System.out.println(pq.poll());
			}
		}
	}

	public static void main(String[] args) {
		GraphW graph = new GraphW(7);
		graph.addNode(0, 0, 1, 2);
		graph.addNode(0, 0, 2, 4);

		graph.addNode(1, 1, 3, 7);
		graph.addNode(1, 1, 2, 1);

		graph.addNode(2, 2, 4, 3);

		graph.addNode(3, 3, 5, 1);

		graph.addNode(4, 4, 3, 2);
		graph.addNode(4, 4, 5, 5);
		
		dijkstras(graph, 6, 0);

	}
}
