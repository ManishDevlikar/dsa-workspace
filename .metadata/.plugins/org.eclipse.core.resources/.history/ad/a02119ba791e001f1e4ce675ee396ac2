package com.practice;

public class NQueen {
	public static void main(String[] args) {
		int n = 4;
		boolean[][] board = new boolean[n][n];
		System.out.println(getPossible(board, n));
	}

	public static int getPossible(boolean[][] board, int row) {
		if (row == board.length) {
			return 1;
		}

		int count = 0;

		for (int col = 0; col < board.length; col++) {
			if (isSafe(board, row, col)) {
				board[row][col] = true;
				count += getPossible(board, row + 1);
				board[row][col] = false;
			}
		}
		return count;
	}

	public static boolean isSafe(boolean board[][], int row, int col) {
		// to check vertically
		for (int i = 0; i < row; i++) {
			if (board[i][col]) {
				return false;
			}
		}
		// to check diagonal left
		int maxLeft = Math.min(row, col);
		for (int i = 1; i < maxLeft; i++) {
			if (board[row - i][col - i]) {
				return false;
			}
		}

		// for diagonal right
		int maxRight = Math.min(row, board.length - col - 1);
		for (int i = 1; i < maxRight; i++) {
			if (board[row - i][col + i]) {
				return false;
			}
		}

		return true;
	}
}
